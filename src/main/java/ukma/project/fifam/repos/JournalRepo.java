package ukma.project.fifam.repos;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;
import ukma.project.fifam.models.*;

import java.util.List;
import java.util.Optional;

public interface JournalRepo extends JpaRepository<Journal, Long> {
    @Query("SELECT j FROM Journal j WHERE j.user=?1")
    Optional<List<Journal>> findJournalsByUserId(User id);

    @Modifying
    @Transactional
    @Query(value = "INSERT INTO Journal (current_balance, description, record_date, sum, user_id) (SELECT CASE WHEN (bf1.freq = ?1) THEN jj.current_balance - ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date)) * bf1.sum) WHEN (bf1.freq = ?2) THEN jj.current_balance - ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 7) * bf1.sum) WHEN (bf1.freq = ?3) THEN jj.current_balance - ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 14) * bf1.sum) WHEN (bf1.freq = ?4) THEN jj.current_balance - ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 30) * bf1.sum) WHEN (bf1.freq = ?5) THEN jj.current_balance - ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 365) * bf1.sum) END AS periods_to_update, bf1.`name`, CASE WHEN (bf1.freq = ?1) THEN CURRENT_TIMESTAMP() WHEN (bf1.freq = ?2) THEN DATE_ADD(bf1.last_pay_date, INTERVAL 7 day) WHEN (bf1.freq = ?3) THEN DATE_ADD(bf1.last_pay_date, INTERVAL 14 day) WHEN (bf1.freq = ?4) THEN DATE_ADD(bf1.last_pay_date, INTERVAL 1 month) WHEN (bf1.freq = ?5) THEN DATE_ADD(bf1.last_pay_date, INTERVAL 1 year) END AS last_pay, CASE WHEN (bf1.freq = ?1) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date)) * bf1.sum WHEN (bf1.freq = ?2) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 7) * bf1.sum WHEN (bf1.freq = ?3) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 14) * bf1.sum WHEN (bf1.freq = ?4) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 30) * bf1.sum WHEN (bf1.freq = ?5) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 365) * bf1.sum END AS sum, bf1.user_id FROM periodic_pays AS bf1, (SELECT j.current_balance, j.user_id FROM Journal AS j ORDER BY j.record_date  DESC LIMIT 1) AS jj WHERE ((bf1.freq = ?1 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 1) OR (bf1.freq = ?2 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 7) OR (bf1.freq = ?3 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 14) OR (bf1.freq = ?4 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 30) OR (bf1.freq = ?5 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 365)) AND jj.user_id = bf1.user_id)", nativeQuery = true)
    void updateJournalFromPeriodicPays(String d, String w, String bw, String m, String y);

    @Modifying
    @Transactional
    @Query(value = "INSERT INTO Journal (current_balance, description, record_date, sum, user_id) (SELECT CASE WHEN (bf1.freq = ?1) THEN ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date)) * bf1.sum) + jj.current_balance WHEN (bf1.freq = ?2) THEN ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 7) * bf1.sum) + jj.current_balance WHEN (bf1.freq = ?3)  THEN ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 14) * bf1.sum) + jj.current_balance WHEN (bf1.freq = ?4) THEN ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 30)  * bf1.sum) + jj.current_balance WHEN (bf1.freq = ?5) THEN ((DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 365) * bf1.sum) + jj.current_balance END AS periods_to_update, \"\", CASE WHEN (bf1.freq = ?1) THEN CURRENT_TIMESTAMP() WHEN (bf1.freq = ?2) THEN  bf1.last_pay_date + (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 7) * 7 WHEN (bf1.freq = ?3)  THEN bf1.last_pay_date + (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 14) * 14 WHEN (bf1.freq = ?4) THEN bf1.last_pay_date + (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 30) * 30 WHEN (bf1.freq = ?5) THEN bf1.last_pay_date + (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 365) * 365 END AS last_pay, CASE WHEN (bf1.freq = ?1) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date)) * bf1.sum WHEN (bf1.freq = ?2) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 7) * bf1.sum WHEN (bf1.freq = ?3)  THEN(DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 14) * bf1.sum WHEN (bf1.freq = ?4) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 30) * bf1.sum WHEN (bf1.freq = ?5) THEN (DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) DIV 365) * bf1.sum END AS sum, bf1.user_id FROM balance_filler AS bf1, (SELECT j.current_balance, j.user_id FROM Journal AS j ORDER BY j.record_date  DESC LIMIT 1) AS jj WHERE ((bf1.freq = ?1 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 1) OR (bf1.freq = ?2 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 7) OR (bf1.freq = ?3 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 14) OR (bf1.freq = ?4 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 30) OR (bf1.freq = ?5 AND DATEDIFF(CURRENT_TIMESTAMP(), bf1.last_pay_date) >= 365)) AND jj.user_id = bf1.user_id )", nativeQuery = true)
    void updateJournalFromBalanceFiller(String d, String w, String bw, String m, String y);
}
